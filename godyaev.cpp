#include "godyaev.h"

/**
 * Метод Гаусса
 */
void godyaev::lab1()
{
for(int k=0; k<N; k++)
        for(int i=k+1; i<N;i++)
           {
               b[i]-=b[k]*(A[i][k]/A[k][k]);; //изменяем столбец свободных членов параллельно с приведением матрицы А к треугольному виду
            for(int j=0;j<N;j++)
                {
                    A[i][j]=A[i][j]-A[k][j]*(A[i][k]/A[k][k]);;
                }
           }
//Вычисление корней
double z=0; //z- используется для нахожения i-ого неизвестного за счет уже найденных N-i неизвестных

 for(int i=N-1;i>=0;i--)
{
    z=0;

    for(int g=N-1;g>i;g--)
    {
     z+=A[i][g]*b[g];
    }


  X[i]=double((b[i]-z)/A[i][i]);
}
}


/**
 * Метод Гаусса с выбором главного элемента
 */
void godyaev::lab2()
{

}



/**
 * Метод квадратного корня (метод Холецкого)
 */
void godyaev::lab3()
{

}



/**
 * Метод прогонки
 */
void godyaev::lab4()
{

}



/**
 * Метод Якоби
 */
void godyaev::lab5()
{

}



/**
 * Метод Зейделя
 */
void godyaev::lab6()
{

}



/**
 * Один из градиентных методов
 */
void godyaev::lab7()
{

}
